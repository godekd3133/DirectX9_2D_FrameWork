#pragma once
#include "KOI_Property.h"
#define CONSTREF(ty) const ty& 


//벡터 2D의 자료형
#if KOI_BASE_ENGINE == KOI_BASE_ENGINE_DIRECTX9
#define KOI_DEF_TYPEDEFINE_VECTOR2D D3DXVECTOR2

#elif KOI_BASE_ENGINE == KOI_BASE_ENGINE_COCOS2DX
#define KOI_DEF_TYPEDEFINE_VECTOR2D Vec2
#endif

//벡터 3D의 자료형
#if KOI_BASE_ENGINE == KOI_BASE_ENGINE_DIRECTX9
#define KOI_DEF_TYPEDEFINE_VECTOR3D D3DXVECTOR3

#elif KOI_BASE_ENGINE == KOI_BASE_ENGINE_COCOS2DX
#define KOI_DEF_TYPEDEFINE_VECTOR3D Vec3
#endif

//벡터 4D의 자료형
#if KOI_BASE_ENGINE == KOI_BASE_ENGINE_DIRECTX9
#define KOI_DEF_TYPEDEFINE_VECTOR4D D3DXVECTOR4

#elif KOI_BASE_ENGINE == KOI_BASE_ENGINE_COCOS2DX
#define KOI_DEF_TYPEDEFINE_VECTOR4D Vec4
#endif

//4X4 메트릭스의 자료형
#if KOI_BASE_ENGINE == KOI_BASE_ENGINE_DIRECTX9
#define KOI_DEF_TYPEDEFINE_MAXTRIX4 D3DXMATRIX

#elif KOI_BASE_ENGINE == KOI_BASE_ENGINE_COCOS2DX
#define KOI_DEF_TYPEDEFINE_MAXTRIX4 Mat4
#endif
